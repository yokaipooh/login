from flask import Flask, render_template, json, request
from forms.searchForms import SearchForm

from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt

app = Flask(__name__, template_folder='templates')
#SET SECRETKEY ---------------------------------------------------------------------------------
class Config_SK(object):
    app.config['SECRET_KEY'] = '6efc92e4fdea016b2111bd8a6432f19b'

#DATABASE---------------------------------------------------------------------------------------
class Config_DB(object):
    POSTGRES = {
        'user': 'postgres',
        'pw': '12345',
        'db': 'postgres',
        'host': 'localhost',
        'port': '5432',
    }

    app.config['DEBUG'] = True
    app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://%(user)s:%(pw)s@%(host)s:%(port)s/%(db)s' % POSTGRES
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False # silence the deprecation warning

app.config.from_object(Config_DB)
db = SQLAlchemy(app)


#HEX USERPASSWORD-------------------------------------------------------------------------------
bcrypt = Bcrypt(app)


#-----------------------------------------------------------------------------------------------
from models.gene import krp1, tcp2


@app.route('/')
@app.route('/home')
def home():
    return render_template('layout.html')

@app.route('/search', methods=['GET', 'POST'])

def search():
    form = SearchForm()
    if request.method == 'POST' and form.validate_on_submit():
        return redirect((url_for('search_results', query=form.search.data)))  # or what you want
    return render_template('search.html', form=form)

@app.route('/search_results/<query>')

def search_results(query):
    if query == 'krp1':
        results = krp1.query.all()
    elif query == 'tcp2':
        results == tcp2.query.all()
    return render_template('search_results.html', query=query, results=results)

if __name__ == '__main__':
    app.run(Debug = True)
-----
{% extends "layout.html"%}
{% block content %}

<div class="container">
    <div class="row">
        <div class="col md-12">
            <div class="jumbotron p-3">
                <!--create table for user managerment and "id" btn for sort table-->
                <table id="user_manager" class="table table-hover table-dark">
                    <tr>
                        <th onclick="w3.sortHTML('#user/manager', '.item', 'td:nth-child(1)')" style="cursor:pointer">ID
                        </th>
                        <th onclick="w3.sortHTML('#user/manager', '.item', 'td:nth-child(2)')" style="cursor:pointer">
                            URI</th>
                        <th onclick="w3.sortHTML('#user/manager', '.item', 'td:nth-child(3)')" style="cursor:pointer">
                            Graph</th>
                        <th onclick="w3.sortHTML('#user/manager', '.item', 'td:nth-child(4)')" style="cursor:pointer">
                            Keyword Reference</th>

                    </tr>

                    {% for item in results %}
                    <tr class="item">
                        <td>{{item.id}}</td>
                        <td>{{item.URI}}</td>
                        <td>{{item.graph}}</td>
                        <td>{{item.keyword_reference}}</td>


                    {% endfor %}

                </table>


            </div>
        </div>
    </div>
</div>
{% endblock %}
-----
from app import db


class krp1(db.Model):
    __tablename__ = 'krp1'

    id = db.Column(db.String(20), nullable = False)
    URI = db.Column(db.String(200), nullable = False)
    graph = db.Column(db.String(200), nullable = False)
    keyword_reference = db.Column(db.String(50), nullable = False)
    belong_to_gene = db.Column(db.Integer, primary_key = True)

class tcp2(db.Model):
    __tablename__ = 'tcp2'

    id = db.Column(db.String(50), nullable = False)
    URI = db.Column(db.String(200), nullable = False)
    graph = db.Column(db.String(200), nullable = False)
    keyword_reference = db.Column(db.String(100), nullable = False)
    belong_to_gene = db.Column(db.Integer, primary_key = True)
